# Default values for app-config.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- Number of Appconfig replicas to deploy
replicaCount: 2

image:
  # -- Image registry
  registry: docker.io
  # -- Image repository
  repository: radarbase/radar-app-config
  # -- Image tag (immutable tags are recommended)
  # Overrides the image tag whose default is the chart appVersion.
  tag:
  # -- Image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
  digest: ""
  # -- Image pull policy
  pullPolicy: IfNotPresent
  # -- Optionally specify an array of imagePullSecrets.
  # Secrets must be manually created in the namespace.
  # e.g:
  # pullSecrets:
  #   - myRegistryKeySecretName
  #
  pullSecrets: []

# -- String to partially override appconfig.fullname template with a string (will prepend the release name)
nameOverride: ""
# -- String to fully override appconfig.fullname template with a string
fullnameOverride: ""

# -- Kubernetes namespace that Appconfig is going to be deployed on
namespace: default

serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

# -- Configure Appconfig pods' Security Context
podSecurityContext: {}
  # fsGroup: 2000

# -- Configure Appconfig containers' Security Context
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  # -- Kubernetes Service type
  type: ClusterIP
  # -- Appconfig port
  port: 8090

# -- Reconfigure Ingress to not force TLS
disable_tls: false

ingress:
  # -- Enable ingress controller resource
  enabled: true
  # -- Annotations that define default ingress class, certificate issuer
  # @default -- check values.yaml
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
  # -- Path within the url structure
  path: /appconfig/api
  # -- Ingress Path type
  pathType: ImplementationSpecific
  # -- IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
  ingressClassName: nginx
  # -- Hosts to accept requests from
  hosts:
    - localhost
  tls:
    # -- TLS Secret Name
    secretName: radar-base-tls

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.

  # -- CPU/Memory resource limits
  limits:
    cpu: 2
  # -- CPU/Memory resource requests
  requests:
    cpu: 100m
    memory: 768Mi

# -- Node labels for pod assignment
nodeSelector: {}

# -- Toleration labels for pod assignment
tolerations: []

# -- Affinity labels for pod assignment
affinity: {}

# -- Extra environment variables
extraEnvVars: []
#  - name: BEARER_AUTH
#    value: true

# -- Custom livenessProbe that overrides the default one
customLivenessProbe: {}

livenessProbe:
  # -- Enable livenessProbe
  enabled: true
  # -- Initial delay seconds for livenessProbe
  initialDelaySeconds: 20
  # -- Period seconds for livenessProbe
  periodSeconds: 60
  # -- Timeout seconds for livenessProbe
  timeoutSeconds: 5
  # -- Success threshold for livenessProbe
  successThreshold: 1
  # -- Failure threshold for livenessProbe
  failureThreshold: 3

# -- Custom readinessProbe that overrides the default one
customReadinessProbe: {}

readinessProbe:
  # -- Enable readinessProbe
  enabled: true
  # -- Initial delay seconds for readinessProbe
  initialDelaySeconds: 20
  # -- Period seconds for readinessProbe
  periodSeconds: 60
  # -- Timeout seconds for readinessProbe
  timeoutSeconds: 5
  # -- Success threshold for readinessProbe
  successThreshold: 1
  # -- Failure threshold for readinessProbe
  failureThreshold: 3

# -- Network policy defines who can access this application and who this applications has access to
# @default -- check `values.yaml`
networkpolicy:
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: '{{ .Release.Namespace }}'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: ingress-nginx
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: '{{ .Release.Namespace }}'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: management-portal
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: '{{ .Release.Namespace }}'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: postgresql
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: kube-system
      podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
      - port: 53
        protocol: UDP
      - port: 53
        protocol: TCP

# -- Standard JAVA_OPTS that should be passed to this service
javaOpts: "-Xmx550m"
# -- OAuth2 client id
clientId: radar_appconfig
# -- OAuth2 client secret
clientSecret: secret

# -- URL of the Management Portal
managementportal_url: http://management-portal:8080/managementportal

jdbc:
  # -- JDBC Connection url of the database.
  url:
  # -- Kubernetes secret containing the database JDBC Connection url
  # (disables use of 'url' value).
  urlSecret:
    name: radar-cloudnative-postgresql-appconfig
    key: jdbc-uri
  # -- Username of the database
  user:
  # -- Kubernetes secret containing the database username
  # (disables use of 'user' value).
  userSecret:
    name: radar-cloudnative-postgresql-appconfig
    key: username
  # -- Password of the user
  password:
  # -- Kubernetes secret containing the database password
  # (disables use of 'password' value).
  passwordSecret:
    name: radar-cloudnative-postgresql-appconfig
    key: password

  # -- Additional JDBC connection parameters e.g. sslmode=verify-full
  # Ignored when using 'urlSecret'.
  parameters:
  # -- JDBC Driver to connect to the database.
  driver: org.postgresql.Driver
  dialect: org.hibernate.dialect.PostgreSQLDialect
