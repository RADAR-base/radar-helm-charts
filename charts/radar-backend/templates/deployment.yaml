apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "common.names.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 4 }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "radar-backend.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  strategy:
    rollingUpdate:
      maxUnavailable: 100%
  template:
    metadata:
      annotations:
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
      labels:
        app.kubernetes.io/name: {{ include "radar-backend.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      {{- include "radar-backend.imagePullSecrets" . | nindent 6 }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: "app.kubernetes.io/name"
                    operator: In
                    values:
                    - {{ template "radar-backend.name" . }}
                  - key: "app.kubernetes.io/instance"
                    operator: In
                    values:
                    - {{ .Release.Name }}
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: {{ template "radar-backend.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          command:
            - radar-backend
            - -c
            - /etc/radar/radar.yml
            - {{ .Values.command }}
          env:
          - name: KAFKA_REST_PROXY
            value: "{{ .Values.rest_proxy }}"
          - name: KAFKA_SCHEMA_REGISTRY
            value: "{{ .Values.schema_registry }}"
          - name: KAFKA_BROKERS
            value: "{{ .Values.kafka_num_brokers }}"
          {{- with .Values.extraEnvVars }}
            {{- toYaml . | nindent 10 }}
          {{- end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: config
              mountPath: /etc/radar/
            - name: backend-monitor-disconnect-data
              mountPath: /var/lib/radar/data
      volumes:
        - name: config
          configMap:
            name: {{ include "radar-backend.fullname" . }}
        - name: backend-monitor-disconnect-data
        {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim | default (include "radar-backend.fullname" .) }}
        {{- else }}
          emptyDir: {}
        {{ end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
