apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaConnect
metadata:
  name: {{ template "common.names.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 4 }}
  annotations:
    strimzi.io/use-connector-resources: "true"
    {{- if .Values.commonAnnotations }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
    {{- end }}
spec:
  version: {{ .Chart.AppVersion }}
  replicas: {{ .Values.replicaCount }}
  bootstrapServers: {{ .Values.kafka }}
  image: {{ template "radar-fitbit-connector.image" . }}
  authentication:
    type: scram-sha-512
    username: shared-service-user
    passwordSecret:
      secretName: {{ .Values.secret.jaas.name }}
      password: password
  config:
    group.id: "default"
    offset.storage.topic: "default.offsets"
    config.storage.topic: "default.config"
    status.storage.topic: "default.status"
    # -1 means it will use the default replication factor configured in the broker
    config.storage.replication.factor: -1
    offset.storage.replication.factor: -1
    status.storage.replication.factor: -1
    key.converter: "io.confluent.connect.avro.AvroConverter"
    value.converter: "io.confluent.connect.avro.AvroConverter"
    key.converter.schema.registry.url: {{ .Values.schema_registry }}
    value.converter.schema.registry.url: {{ .Values.schema_registry }}
    internal.key.converter: "org.apache.kafka.connect.json.JsonConverter"
    internal.value.converter: "org.apache.kafka.connect.json.JsonConverter"
    # CONNECTOR properties
    name: radar-fitbit-source
    fitbit.api.client: {{ .Values.fitbit_api_client }}
    fitbit.api.secret: {{ .Values.fitbit_api_secret }}
    fitbit.api.intraday: {{ .Values.includeIntradayData }}
    fitbit.user.repository.class: org.radarbase.connect.rest.fitbit.user.ServiceUserRepository
    fitbit.user.repository.url: {{ .Values.radar_rest_sources_backend_url }}
    fitbit.user.repository.client.id: {{ .Values.oauthClientId }}
    fitbit.user.repository.client.secret: {{ .Values.oauthClientSecret }}
    fitbit.user.repository.oauth2.token.url: {{ .Values.managementportal_url }}/oauth/token
    fitbit.user.poll.interval: {{ .Values.fitbit_user_poll_interval | int }}
    fitbit.user.dir: /mnt/users
  template:
    pod:
      metadata:
        annotations:
          checksum/configmap-users: {{ include (print $.Template.BasePath "/configmap-users.yaml") . | sha256sum }}
          backup.velero.io/backup-volumes: logs
        labels:
          app.kubernetes.io/name: {{ include "radar-fitbit-connector.name" . }}
          app.kubernetes.io/instance: {{ .Release.Name }}
      {{- include "radar-fitbit-connector.imagePullSecrets" . | nindent 6 }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: "app.kubernetes.io/name"
                      operator: In
                      values:
                        - {{ template "radar-fitbit-connector.name" . }}
                    - key: "app.kubernetes.io/instance"
                      operator: In
                      values:
                        - {{ .Release.Name }}
                topologyKey: "kubernetes.io/hostname"
      volumes:
        - name: config-users
          configMap:
            name: {{ include "radar-fitbit-connector.fullname" . }}-users
        - name: logs
        {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim | default (include "radar-fitbit-connector.fullname" .) }}
        {{- else }}
          emptyDir: { }
        {{ end }}
    connectContainer:
      env:
        {{- if .Values.secret.jaas.name }}
        - name: CONNECT_SASL_JAAS_CONFIG
          valueFrom:
            secretKeyRef:
              name: {{ .Values.secret.jaas.name }}
              key: {{ .Values.secret.jaas.key }}
        {{- end }}
        - name: CONNECT_APPLICATION_LOOP_INTERVAL_MS
          value: {{ .Values.application_loop_interval_ms | quote }}
        - name: CONNECT_USER_CACHE_REFRESH_INTERVAL_MS
          value: {{ .Values.user_cache_refresh_interval_ms | quote }}
        - name: CONNECT_REST_SOURCE_BASE_URL
          value: {{ .Values.fitbit_api_url }}
        - name: CONNECT_REST_SOURCE_POLL_INTERVAL_MS
          value: {{ .Values.rest_source_poll_interval_ms | quote }}
        - name: CONNECT_REST_SOURCE_REQUEST_GENERATOR_CLASS
          value: org.radarbase.connect.rest.fitbit.request.FitbitRequestGenerator
        - name: CONNECT_REST_ADVERTISED_HOST_NAME
          value: {{ include "radar-fitbit-connector.fullname" . }}
        {{- if .Values.zookeeper }}
        - name: CONNECT_ZOOKEEPER_CONNECT
          value: "{{ .Values.zookeeper }}"
        {{- end }}
        - name: KAFKA_HEAP_OPTS
          value: {{ .Values.heapOptions }}
        - name: KAFKA_BROKERS
          value: "{{ .Values.kafka_num_brokers }}"
        - name: CONNECT_LOG4J_LOGGERS
          value: "org.reflections=ERROR"
        - name: WAIT_FOR_KAFKA
          value: {{ if .Values.kafka_wait.enabled }}"1"{{ else }}"0"{{ end }}
        {{- if and .Values.kafka_wait.enabled .Values.kafka_wait.properties }}
        - name: COMMAND_CONFIG_FILE_PATH
          value: /etc/kafka-connect/source-fitbit/kafka-wait.properties
        {{- end }}
        {{- with .Values.extraEnvVars }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      volumeMounts:
        - name: config-users
          mountPath: /mnt/users
{{/* TODO is logs mount needed or was it there only to store the offset file (CONNECT_OFFSET_STORAGE_FILE_FILENAME: "/var/lib/kafka-connect-fitbit-source/logs/connect.offsets) */}}
        - name: logs
          mountPath: /mnt/logs
{{/*    {{- if .Values.persistence.fsUserOverride }}*/}}
{{/* TODO is this needed? Init container cannot be specified in the previous format (no matching specs) */}}
{{/*    initContainer:*/}}
{{/*      - name: fix-permissions*/}}
{{/*        command:*/}}
{{/*          - chown*/}}
{{/*          - -R*/}}
{{/*          - {{ .Values.persistence.fsUserOverride }}*/}}
{{/*          - /var/lib/kafka-connect-fitbit-source/logs*/}}
{{/*        image: alpine:latest*/}}
{{/*        imagePullPolicy: IfNotPresent*/}}
{{/*        volumeMounts:*/}}
{{/*          - mountPath: /var/lib/kafka-connect-fitbit-source/logs*/}}
{{/*            name: logs*/}}
{{/*    {{- end }}*/}}
  {{- if .Values.customLivenessProbe }}
  livenessProbe: {{- .Values.customLivenessProbe | toYaml | nindent 12 }}
  {{- else if .Values.livenessProbe.enabled }}
  livenessProbe:
{{/*    TODO exec not supported (not part of Probe schema) */}}
{{/*    exec:*/}}
{{/*      command:*/}}
{{/*        - /bin/sh*/}}
{{/*        - -c*/}}
{{/*        - curl -sf localhost:8083/connectors/radar-fitbit-source/status | grep -o '\"state\":\"[^\"]*\"' | tr '\\n' ',' | grep -vq FAILED || exit 1*/}}
    initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
    periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
    timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
    successThreshold: {{ .Values.livenessProbe.successThreshold }}
    failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
  {{- end }}
  {{- if .Values.customReadinessProbe }}
  readinessProbe: {{- .Values.customReadinessProbe | toYaml | nindent 12 }}
  {{- else if .Values.readinessProbe.enabled }}
  readinessProbe:
{{/*    TODO exec not supported (not part of Probe schema) */}}
{{/*    exec:*/}}
{{/*      command:*/}}
{{/*        - /bin/sh*/}}
{{/*        - -c*/}}
{{/*        - curl -sf localhost:8083/connectors/radar-fitbit-source/status | grep -o '\"state\":\"[^\"]*\"' | tr '\\n' ',' | grep -vq FAILED || exit 1*/}}
    initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
    periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
    timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
    successThreshold: {{ .Values.readinessProbe.successThreshold }}
    failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
  {{- end }}
  resources:
    {{- toYaml .Values.resources | nindent 4 }}

{{/* TODO no matching config in specs for options below */}}
{{/*  {{- with .Values.nodeSelector }}*/}}
{{/*  nodeSelector:*/}}
{{/*    {{- toYaml . | nindent 4 }}*/}}
{{/*  {{- end }}*/}}
{{/*  {{- with .Values.affinity }}*/}}
{{/*  affinity:*/}}
{{/*    {{- toYaml . | nindent 4 }}*/}}
{{/*  {{- end }}*/}}
{{/*  {{- with .Values.tolerations }}*/}}
{{/*  tolerations:*/}}
{{/*    {{- toYaml . | nindent 4 }}*/}}
{{/*  {{- end }}*/}}
