apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "common.names.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 4 }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
data:
  healthcheck.sh: |
    #!/bin/sh
    STATUS=$(curl -s --max-time 4 localhost:{{ .Values.service.port }}/kafka/health)
    if ! (echo "$STATUS" | grep -Fq '"kafka":{"status":"UP"'); then
      exit 1
    fi
  gateway.yml: |
    # Resource config class
    #resourceConfig: org.radarbase.gateway.inject.ManagementPortalEnhancerFactory

    server:
      baseUri: http://0.0.0.0:{{ .Values.service.port }}/kafka/
      {{- range $key, $value := .Values.serverProperties }}
      {{ $key }}: {{ $value }}
      {{- end }}

    kafka:
      producer:
        bootstrap.servers: {{ .Values.bootstrapServers }}
        {{- range $key, $value := .Values.producerProperties }}
        {{ $key }}: {{ $value }}
        {{- end }}
        {{- if .Values.cc.enabled }}
        security.protocol: SASL_SSL
        sasl.jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required username="{{ .Values.cc.apiKey }}" password="{{ .Values.cc.apiSecret }}";
        ssl.endpoint.identification.algorithm: https
        sasl.mechanism: PLAIN
        {{- end }}
      admin:
        bootstrap.servers: {{ .Values.bootstrapServers }}
        {{- range $key, $value := .Values.adminProperties }}
        {{ $key }}: {{ $value }}
        {{- end }}
        {{- if .Values.cc.enabled }}
        security.protocol: SASL_SSL
        sasl.jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required username="{{ .Values.cc.apiKey }}" password="{{ .Values.cc.apiSecret }}";
        ssl.endpoint.identification.algorithm: https
        sasl.mechanism: PLAIN
        {{- end }}
      serialization:
        schema.registry.url: {{ .Values.schemaRegistry }}
        {{- range $key, $value := .Values.serializationProperties }}
        {{ $key }}: {{ $value }}
        {{- end }}
        {{- if .Values.cc.enabled }}
        basic.auth.credentials.source: USER_INFO
        schema.registry.basic.auth.user.info: {{ .Values.cc.schemaRegistryApiKey }}:{{ .Values.cc.schemaRegistryApiSecret }}
        {{- end }}
    auth:
      managementPortalUrl: {{ .Values.managementportal_url }}
      checkSourceId: {{ .Values.checkSourceId }}
      {{- if or .Values.public_key_endpoints_enabled .Values.public_key_endpoints }}
      publicKeyUrls:
        - {{ printf "%s://%s/managementportal/oauth/token_key" .Values.advertised_protocol .Values.serverName | quote }}
        {{- range .Values.public_key_endpoints }}
        - {{ . | quote }}
        {{ end -}}
      {{- end}}
