{{- $isSource := eq .Values.mode "source" -}}
{{- $name := ternary  .Values.source.name .Values.sink.name $isSource -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "radar-jdbc-connector.fullname" . }}
  labels:
    {{- include "radar-jdbc-connector.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "radar-jdbc-connector.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      annotations:
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
      labels:
        app.kubernetes.io/name: {{ include "radar-jdbc-connector.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: "app.kubernetes.io/name"
                    operator: In
                    values:
                    - {{ template "radar-jdbc-connector.name" . }}
                  - key: "app.kubernetes.io/instance"
                    operator: In
                    values:
                    - {{ .Release.Name }}
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
          - name: CONNECT_BOOTSTRAP_SERVERS
            value: "{{ .Values.kafka }}"
          - name: CONNECT_REST_PORT
            value: "8083"
          - name: CONNECT_GROUP_ID
            value: "default"
          - name: CONNECT_CONFIG_STORAGE_TOPIC
            value: "default.config"
          - name: CONNECT_OFFSET_STORAGE_TOPIC
            value: "default.offsets"
          - name: CONNECT_STATUS_STORAGE_TOPIC
            value: "default.status"
          - name: CONNECT_KEY_CONVERTER
            value: "io.confluent.connect.avro.AvroConverter"
          - name: CONNECT_VALUE_CONVERTER
            value: "io.confluent.connect.avro.AvroConverter"
          - name: CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL
            value: "{{ .Values.schema_registry }}"
          - name: CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL
            value: "{{ .Values.schema_registry }}"
          - name: CONNECT_OFFSET_STORAGE_FILE_FILENAME
            value: "/var/lib/kafka-connect-jdbc/logs/connect.offsets"
          - name: CONNECT_REST_ADVERTISED_HOST_NAME
            value: "radar-jdbc-connector"
          - name: CONNECT_CONSUMER_MAX_POLL_RECORDS
            value: "500"
          - name: CONNECT_CONSUMER_MAX_POLL_INTERVAL_MS
            value: "300000"
          - name: CONNECT_CONSUMER_SESSION_TIMEOUT_MS
            value: "10000"
          - name: CONNECT_CONSUMER_HEARTBEAT_INTERVAL_MS
            value: "3000"
          - name: CONNECT_PLUGIN_PATH
            value: /usr/share/kafka-connect/plugins
          - name: CONNECT_LOG4J_ROOT_LOGLEVEL
            value: {{ .Values.logLevel.root | quote }}
          - name: KAFKA_BROKERS
            value: "{{ .Values.kafka_num_brokers }}"
          - name: CONNECT_LOG4J_LOGGERS
            value: {{ include "radar-jdbc-connector.loggers" . | trimSuffix "," | quote }}
          - name: CONNECTOR_PROPERTY_FILE_PREFIX
            value: "{{ $name }}/connector"
          - name: KAFKA_HEAP_OPTS
            value: "{{ .Values.heapOpts }}"
          {{- if .Values.sentry.dsn }}
          - name: SENTRY_DSN
            value: {{ .Values.sentry.dsn }}
          - name: SENTRY_LOG_LEVEL
            value: {{ .Values.sentry.level }}
            {{- if .Values.sentry.stacktrace.enabled }}
          - name: SENTRY_ATTACH_STACKTRACE
            value: {{ .Values.sentry.stacktrace.enabled | quote }}
          - name: SENTRY_STACKTRACE_APP_PACKAGES
            value: {{ .Values.sentry.stacktrace.packages}}
            {{- end }}
          - name: SENTRY_NAME
            value: {{ .Values.sentry.service.name }}
          - name: SENTRY_RELEASE
            value: {{ .Values.sentry.service.release }}
          - name: SENTRY_ENVIRONMENT
            value: {{ .Values.sentry.service.environment }}
          {{- else }}
          - name: SENTRY_ENABLED
            value: "false"
          {{- end }}
          {{- with .Values.extraEnvVars }}
            {{- toYaml . | nindent 10 }}
          {{- end }}
          ports:
            - name: http
              containerPort: 8083
              protocol: TCP
          {{- if .Values.customLivenessProbe }}
          livenessProbe: {{- .Values.customLivenessProbe | toYaml | nindent 12 }}
          {{- else if .Values.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command:
              - /bin/sh
              - /etc/kafka-connect/{{ $name }}/healthcheck.sh
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.customReadinessProbe }}
          readinessProbe: {{- .Values.customReadinessProbe | toYaml | nindent 12 }}
          {{- else if .Values.readinessProbe.enabled }}
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - /etc/kafka-connect/{{ $name }}/healthcheck.sh
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: config
              mountPath: /etc/kafka-connect/{{ $name }}
            {{- if $isSource }}
            - name: offset-storage
              mountPath: /var/lib/kafka-connect-jdbc/logs
            {{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ include "radar-jdbc-connector.fullname" . }}
        {{- if $isSource }}
        - name: offset-storage
        {{- if .Values.source.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.source.persistence.existingClaim | default (include "radar-jdbc-connector.fullname" .) }}
        {{- else }}
          emptyDir: {}
        {{- end }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
