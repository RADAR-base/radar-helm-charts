# Default values for radar-jdbc-connector.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- Number of radar-jdbc-connector replicas to deploy
replicaCount: 1

image:
  # -- radar-jdbc-connector image repository
  repository: radarbase/radar-jdbc-connector
  # -- radar-jdbc-connector image tag (immutable tags are recommended)
  # Overrides the image tag whose default is the chart appVersion.
  tag:
  # -- radar-jdbc-connector image pull policy
  pullPolicy: IfNotPresent

# -- Docker registry secret names as an array
imagePullSecrets: []

# -- String to partially override radar-jdbc-connector.fullname template with a string (will prepend the release name)
nameOverride: ""
# -- String to fully override radar-jdbc-connector.fullname template with a string
fullnameOverride: ""

# -- Configure radar-jdbc-connector pods' Security Context
podSecurityContext: {}
  # fsGroup: 2000

# -- Configure radar-jdbc-connector containers' Security Context
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  # -- Kubernetes Service type
  type: ClusterIP
  # -- radar-jdbc-connector port
  port: 8083

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi

  # -- CPU/Memory resource requests
  requests:
    cpu: 100m
    memory: 1Gi

# -- Node labels for pod assignment
nodeSelector: {}

# -- Toleration labels for pod assignment
tolerations: []

# -- Affinity labels for pod assignment
affinity: {}

# -- Additional environment variables to pass to the connector. These can be used to pass supported kafka and connect specifc [configs](https://docs.confluent.io/platform/current/installation/docker/config-reference.html#kconnect-long-configuration)
extraEnvVars:
  # -- Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.
  - name: CONNECT_SECURITY_PROTOCOL
    value: PLAINTEXT

# -- Custom livenessProbe that overrides the default one
customLivenessProbe: {}

livenessProbe:
  # -- Enable livenessProbe
  enabled: true
  # -- Initial delay seconds for livenessProbe
  initialDelaySeconds: 15
  # -- Period seconds for livenessProbe
  periodSeconds: 60
  # -- Timeout seconds for livenessProbe
  timeoutSeconds: 5
  # -- Success threshold for livenessProbe
  successThreshold: 1
  # -- Failure threshold for livenessProbe
  failureThreshold: 3

# -- Custom readinessProbe that overrides the default one
customReadinessProbe: {}

readinessProbe:
  # -- Enable readinessProbe
  enabled: true
  # -- Initial delay seconds for readinessProbe
  initialDelaySeconds: 15
  # -- Period seconds for readinessProbe
  periodSeconds: 60
  # -- Timeout seconds for readinessProbe
  timeoutSeconds: 5
  # -- Success threshold for readinessProbe
  successThreshold: 1
  # -- Failure threshold for readinessProbe
  failureThreshold: 3

# -- Network policy defines who can access this application and who this applications has access to
# @default -- check `values.yaml`
networkpolicy:
  policyTypes:
  - Egress
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: '{{ .Release.Namespace }}'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: 'cp-kafka'
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: '{{ .Release.Namespace }}'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: 'cp-schema-registry'
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: '{{ .Release.Namespace }}'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: 'timescaledb-postgresql'
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: kube-system
      podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
      - port: 53
        protocol: UDP
      - port: 53
        protocol: TCP

# -- URI of Kafka brokers of the cluster
kafka: PLAINTEXT://cp-kafka-headless:9092
# -- Number of Kafka brokers. This is used to validate the cluster availability at connector init.
kafka_num_brokers: "3"
# -- URL of the Kafka schema registry
schema_registry: http://cp-schema-registry:8081

# -- Maximum number of worker threads inside a connector pod.
maxTasks: 2

# -- Either source or sink
mode: sink

logLevel:
  # -- Default log level
  root: INFO
  # -- Per-logger log-level
  loggers:
    org.reflections: ERROR

# -- Java heap options
heapOpts: "-Xms1500m"

source:
  # -- Name of the connector Kafka producer group
  name: radar-jdbc-source
  # -- Database schema (if any)
  schema: public
  # -- Comma-separted list of tables to read
  tableWhitelist: ""
  # -- Prefix to prepend to table names to generate the name of the Kafka topic to publish data to.
  topicPrefix: ""
  # -- How to detect new values in a table.
  mode: incrementing
  # -- When using mode incrementing, which column to use as incrementing. If empty, autodetection will be used.
  incrementingColumnName: ""
  # -- Field to use as key for the records. If empty, no key is used.
  keyField: ""
  persistence:
    # -- Whether to enable persistence for storing offsets
    enabled: true
    # -- Existing persistent volume claim to use
    existingClaim:
    # -- PVC access mode
    accessMode: ReadWriteOnce
    # -- PVC storage size request
    size: 20Mi

sink:
  # -- Name of the connector Kafka consumer group
  name: radar-jdbc-sink
  # -- create table if it does not exist
  autoCreate: true
  # -- How to insert new values into the database
  insertMode: upsert
  transforms:
    # -- Whether to merge the key fields into the inserted values.
    enabled: true
    # -- Class to handle merging the key into the record
    mergeKeyType: org.radarbase.kafka.connect.transforms.MergeKey
    # -- Class to convert time-based fields into SQL timestamps
    timestampType: org.radarbase.kafka.connect.transforms.TimestampConverter
    # -- Field names to consider for converting to timestamp
    timestampFields:
      - time
      - timeReceived
      - timeCompleted
      - timestamp

  primaryKeys:
    # -- where to read the primary keys from when creating the table
    mode: record_value
    # -- fields to include as primary keys when creating the table
    fields:
      - time
      - userId
      - projectId
  # -- Comma-separated list of topics the connector will read from and ingest into the database
  topics: android_phone_relative_location, android_phone_battery_level, connect_upload_altoida_summary, connect_fitbit_intraday_heart_rate, connect_fitbit_intraday_steps
  # -- How to format a table name based on the inserted topic
  tableNameFormat: "${topic}"

jdbc:
  # -- Host of the TimescaleDB database
  url: jdbc:postgresql://timescaledb-postgresql-headless:5432/grafana-metrics
  # -- TimescaleDB database username
  user: grafana
  # -- TimescaleDB database password
  password: password
  # -- JDBC connect dialect that the database uses
  dialect: TimescaleDBDatabaseDialect

# Sentry monitoring configuration
sentry:
  # -- DSN (Data Source Name) of the sentry server
  dsn:
  # -- Log level for sentry (TRACE, DEBUG, INFO, WARN, or ERROR)
  level: ERROR
  service:
    # -- Name of the sentry service
    name:
    # -- App version of the sentry service
    release:
    # -- Environment of the sentry service
    environment: production
  stacktrace:
    # -- Set to true, if stack trace should be enabled
    enabled: true
    # -- Comma-separated list of package prefixes to be included in the stacktrace
    packages: "io.confluent.connect.jdbc"
