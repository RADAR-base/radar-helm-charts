# -- Ory Kratos configuration
# @default -- check `values.yaml`
kratos:

  # -- Hostname for the Kratos service
  server_name: localhost
  # -- Protocol for the Kratos service (allowed values: http, https)
  advertised_protocol: https

  ingress:
    admin:
      enabled: true
      className: "nginx"
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
      hosts:
        - host: '{{ .Values.server_name }}'
          paths:
            - path: "/admin/kratos/?(.*)"
              pathType: ImplementationSpecific
      tls:
        - hosts:
            - '{{ .Values.server_name }}'
          secretName: radar-base-tls

    public:
      enabled: true
      className: "nginx"
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /$1
        cert-manager.io/cluster-issuer: letsencrypt-prod
      hosts:
        - host: '{{ .Values.server_name }}'
          paths:
            - path: "/kratos/?(.*)"
              pathType: ImplementationSpecific
      tls:
        - hosts:
            - '{{ .Values.server_name }}'
          secretName: kratos-public-tls

  kratos:
    # -- Enables database migration
    automigration:
      enabled: true

    # -- You can add multiple identity schemas here. You can pass JSON schema using `--set-file` Helm CLI argument.
    identitySchemas:
      "identity.user.schema.json": |
        {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "$id": "user",
          "title": "user",
          "type": "object",
          "properties": {
            "traits": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "format": "email",
                  "title": "E-Mail",
                  "minLength": 5,
                  "ory.sh/kratos": {
                    "credentials": {
                      "password": {
                        "identifier": true
                      },
                      "totp": {
                        "account_name": true
                      }
                    },
                    "verification": {
                      "via": "email"
                    },
                    "recovery": {
                      "via": "email"
                    }
                  }
                }
              },
              "required": [ "email" ]
            }
          },
          "additionalProperties": false
        }
      "identity.default.schema.json": |
        {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "$id": "default",
          "title": "user",
          "type": "object",
          "properties": {
            "traits": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "format": "email",
                  "title": "E-Mail",
                  "minLength": 5,
                  "ory.sh/kratos": {
                    "credentials": {
                      "password": {
                        "identifier": true
                      },
                      "totp": {
                        "account_name": true
                      }
                    },
                    "verification": {
                      "via": "email"
                    },
                    "recovery": {
                      "via": "email"
                    }
                  }
                }
              },
              "required": [ "email" ]
            }
          },
          "additionalProperties": false
        }

    config:
      # Leave empty to use the DSN environmental variable.
      dsn:
      session:
        # Defines how long a session is active. Once that lifespan has been reached, the user needs to sign in again.
        lifespan: 24h

        cookie:
          ## -- If false, cookie is removed when the browser is closed --##
          persistent: false

      courier:
        smtp:
          from_address: radar@thehyve.nl

      serve:
        public:
          base_url: '{{ .Values.advertised_protocol }}://{{ .Values.server_name }}/kratos/'
          cors:
            enabled: true
            allowed_origins:
              - '{{ .Values.advertised_protocol }}://{{ .Values.server_name }}/kratos-ui/'
            allowed_methods:
              - POST
              - GET
              - PUT
              - PATCH
              - DELETE
            allowed_headers:
              - Authorization
              - Cookie
              - Content-Type
              - Accept
            exposed_headers:
              - Content-Type
              - Set-Cookie
              - Accept
            allow_credentials: true
        admin:
          base_url: '{{ .Values.advertised_protocol }}://{{ .Values.server_name }}/admin/kratos/'

      selfservice:
        default_browser_return_url: '{{ .Values.advertised_protocol }}://{{ .Values.server_name }}/managementportal'
        allowed_return_urls:
          - '{{ .Values.advertised_protocol }}://{{ .Values.server_name }}/'

        methods:
          password:
            config:
              haveibeenpwned_enabled: true
              max_breaches: 0
              ignore_network_errors: false
              min_password_length: 12
              identifier_similarity_check_enabled: true
            enabled: true
          totp:
            config:
              issuer: Radar
            enabled: true
          link:
            enabled: true

        flows:
          error:
            ui_url: '{{ .Values.advertised_protocol }}://{{ .Values.server_name }}/kratos-ui/error'

          settings:
            ui_url: '{{ .Values.advertised_protocol }}://{{ .Values.server_name }}/kratos-ui/settings'
            required_aal: highest_available

          recovery:
            enabled: true
            ui_url: '{{ .Values.advertised_protocol }}://{{ .Values.server_name }}/kratos-ui/recovery'
            use: link

          verification:
            # our current flow necessitates that users reset their password after they activate an account in managementportal,
            # this works as verification
            ui_url: '{{ .Values.advertised_protocol }}://{{ .Values.server_name }}/kratos-ui/verification'
            enabled: false
            use: link
            after:
              default_browser_return_url: '{{ .Values.advertised_protocol }}://{{ .Values.server_name }}/kratos-ui'

          logout:
            after:
              default_browser_return_url: '{{ .Values.advertised_protocol }}://{{ .Values.server_name }}/kratos-ui/login'

          login:
            ui_url: '{{ .Values.advertised_protocol }}://{{ .Values.server_name }}/kratos-ui/login'

          registration:
            ui_url: '{{ .Values.advertised_protocol }}://{{ .Values.server_name }}/kratos-ui/registration'
            after:
              password:
                hooks:
                  - hook: session
              oidc:
                hooks:
                  - hook: session

      identity:
        default_schema_id: user
        schemas:
          # identitySchemas:
          - id: user
            url: file:///etc/config/identity.user.schema.json

      log:
        level: debug
        format: text
        leak_sensitive_values: true

  # Register cloudnativepg secret to be used by Kratos.
  deployment:
    extraEnv:
      - name: DSN
        valueFrom:
          secretKeyRef:
            name: radar-cloudnative-postgresql-kratos
            key: uri
  statefulSet:
    extraEnv:
      - name: DSN
        valueFrom:
          secretKeyRef:
            name: radar-cloudnative-postgresql-kratos
            key: uri
  job:
    extraEnv:
      - name: DSN
        valueFrom:
          secretKeyRef:
            name: radar-cloudnative-postgresql-kratos
            key: uri
  cronjob:
    cleanup:
      extraEnv:
        - name: DSN
          valueFrom:
            secretKeyRef:
              name: radar-cloudnative-postgresql-kratos
              key: uri
