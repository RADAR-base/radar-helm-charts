{{- $restSourceClients := trim (include "radar-rest-sources-backend.enabledMapElementsAsList" .Values.restSourceClients) -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "common.names.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 4 }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
data:
  authorizer.yml: |
    service:
      # Interval time in minutes for syncing projects and subjects.
      baseUri: http://0.0.0.0:8080/rest-sources/backend/
      advertisedBaseUri: {{ printf "%s://%s/rest-sources/backend" .Values.advertised_protocol .Values.serverName }}
      enableCors: true
      syncParticipantsIntervalMin: 2
      {{- if .Values.authorizer -}}
      {{ .Values.authorizer | toYaml | nindent 6 }}
      {{- end }}

    auth:
      # Management Portal URL
      managementPortalUrl: {{ .Values.managementportal_url }}
      # OAuth2 Client id of rest sources authorizer backend
      clientId: radar_rest_sources_auth_backend
      # OAuth2 Client Secret of rest sources authorizer backend client
      clientSecret: {{ .Values.client_secret }}

    database:
      driver: org.postgresql.Driver
      dialect: org.hibernate.dialect.PostgreSQLDialect

    restSourceClients:
    {{- if $restSourceClients }}
      {{- $restSourceClients | nindent 6 }}
    {{- else }} []
    {{- end }}

    {{- if .Values.redis.uri }}
    redis:
        uri: {{ .Values.redis.uri }}
    {{- end }}
