# Default values for radar-rest-sources-backend.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- Number of radar-rest-sources-backend replicas to deploy
replicaCount: 2

image:
  # -- Image registry
  registry: docker.io
  # -- Image repository
  repository: radarbase/radar-rest-source-auth-backend
  # -- Image tag (immutable tags are recommended)
  # Overrides the image tag whose default is the chart appVersion.
  tag:
  # -- Image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
  digest: ""
  # -- Image pull policy
  pullPolicy: IfNotPresent
  # -- Optionally specify an array of imagePullSecrets.
  # Secrets must be manually created in the namespace.
  # e.g:
  # pullSecrets:
  #   - myRegistryKeySecretName
  #
  pullSecrets: []

# -- Docker registry secret names as an array
imagePullSecrets: []

# -- String to partially override radar-rest-sources-backend.fullname template with a string (will prepend the release name)
nameOverride: ""
# -- String to fully override radar-rest-sources-backend.fullname template with a string
fullnameOverride: ""

# -- Configure radar-rest-sources-backend pods' Security Context
podSecurityContext: {}
  # fsGroup: 2000

# -- Configure radar-rest-sources-backend containers' Security Context
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  # -- Kubernetes Service type
  type: ClusterIP
  # -- radar-rest-sources-backend port
  port: 8080

# -- Disable TLS (reconfigures Ingress)
disable_tls: false
# -- The protocol in advertised URIs (https, http)
advertised_protocol: https

ingress:
  # -- Enable ingress controller resource
  enabled: true
  # -- Annotations that define default ingress class, certificate issuer and session configuration
  # @default -- check values.yaml
  annotations:
    nginx.ingress.kubernetes.io/affinity: cookie
    nginx.ingress.kubernetes.io/affinity-mode: persistent
    nginx.ingress.kubernetes.io/session-cookie-path: /rest-sources/
    nginx.ingress.kubernetes.io/session-cookie-samesite: Strict
    nginx.ingress.kubernetes.io/session-cookie-max-age: "900"
    nginx.ingress.kubernetes.io/session-cookie-expires: "900"
    cert-manager.io/cluster-issuer: letsencrypt-prod
  # -- Path within the url structure
  path: /rest-sources/backend
  # -- Ingress Path type
  pathType: ImplementationSpecific
  # -- IngressClass that will be used to implement the Ingress (Kubernetes 1.18+)
  ingressClassName: nginx
  # -- Hosts to accept requests from
  hosts:
    - localhost
  tls:
    # -- TLS Secret Name
    secretName: radar-base-tls

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi

  # -- CPU/Memory resource requests
  requests:
    cpu: 100m
    memory: 400Mi

# -- Node labels for pod assignment
nodeSelector: {}

# -- Toleration labels for pod assignment
tolerations: []

# -- Affinity labels for pod assignment
affinity: {}

# -- Extra environment variables
extraEnvVars: []
#  - name: BEARER_AUTH
#    value: true

# -- Custom livenessProbe that overrides the default one
customLivenessProbe: {}

livenessProbe:
  # -- Enable livenessProbe
  enabled: true
  # -- Initial delay seconds for livenessProbe
  initialDelaySeconds: 5
  # -- Period seconds for livenessProbe
  periodSeconds: 30
  # -- Timeout seconds for livenessProbe
  timeoutSeconds: 3
  # -- Success threshold for livenessProbe
  successThreshold: 1
  # -- Failure threshold for livenessProbe
  failureThreshold: 3

# -- Custom readinessProbe that overrides the default one
customReadinessProbe: {}

readinessProbe:
  # -- Enable readinessProbe
  enabled: true
  # -- Initial delay seconds for readinessProbe
  initialDelaySeconds: 5
  # -- Period seconds for readinessProbe
  periodSeconds: 15
  # -- Timeout seconds for readinessProbe
  timeoutSeconds: 3
  # -- Success threshold for readinessProbe
  successThreshold: 1
  # -- Failure threshold for readinessProbe
  failureThreshold: 3

# -- Network policy defines who can access this application and who this applications has access to
# @default -- check `values.yaml`
networkpolicy:
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: '{{ .Release.Namespace }}'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: ingress-nginx
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: '{{ .Release.Namespace }}'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: management-portal
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: '{{ .Release.Namespace }}'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: radar-push-endpoint
  egress:
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
        except:
        - 10.0.0.0/8
        - 192.168.0.0/16
        - 172.16.0.0/12
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: '{{ .Release.Namespace }}'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: '{{ .Values.postgres.host | default "radar-cloudnative-postgresql-cluster" | trunc 63 | trimSuffix "-" }}'
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: '{{ .Release.Namespace }}'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: 'redis'
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: '{{ .Release.Namespace }}'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: 'management-portal'
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: kube-system
      podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
      - port: 53
        protocol: UDP
      - port: 53
        protocol: TCP

# Additional authorizer configurations.
authorizer:
  # -- Within how many minutes an online authorization attempt should be finalized. Steps: logging in to Fitbit, returning to the authorizer.
  tokenExpiryTimeInMinutes: 15
  # -- Within how many minutes an authorization attempt by a participant should be finalized. Steps: passing token to participant, them logging in to Fitbit, and returning to the authorizer.
  persistentTokenExpiryInMin: 7200  # 5 days

# Configuration of the Postgres database to store data from Rest sources authorizer backend
postgres:
  # -- host name of the postgres db
  host:
  # -- port of the postgres db
  port:
  # -- database name
  database:
  # -- Kubernetes secret containing the database JDBC Connection url
  # (disables use of 'host', 'port' and 'database' values).
  urlSecret:
    name: radar-cloudnative-postgresql-restsourceauthorizer
    key: jdbc-uri
  # -- postgres user
  user:
  # --Kubernetes secret containing the database user
  # (disables use of 'user' value).
  userSecret:
    name: radar-cloudnative-postgresql-restsourceauthorizer
    key: username
  # -- password of the postgres user
  password:
  # -- Kubernetes secret containing the database password
  # (disables use of 'password' value).
  passwordSecret:
    name: radar-cloudnative-postgresql-restsourceauthorizer
    key: password

  # -- Additional JDBC connection parameters e.g. sslmode=verify-full.
  # Ignored when using 'urlSecret'.
  connection_parameters: ""
  ssl:
    # -- set to true of the connecting to postgres using SSL
    enabled: false
    keystorepassword: keystorepassword

# Redis synchronization configuration
redis:
  # -- URI of the redis database
  uri: redis://redis-master:6379

# -- Resolvable server name, needed to find the advertised URL and callback URL
serverName: localhost

# -- URL of the Management Portal
managementportal_url: http://management-portal:8080/managementportal

# -- OAuth2 client secret of the radar-rest-sources-backend client from Management Portal
client_secret: secret

restSourceClients:
  fitbit:
    # -- set to true, if Fitbit client should be used
    enable: false
    # -- Type of the data sources
    sourceType: FitBit
    # -- Authorization endpoint for Fitbit authentication and authorization
    authorizationEndpoint: https://www.fitbit.com/oauth2/authorize
    # -- Token endpoint to request access-token from FitBit
    tokenEndpoint: https://api.fitbit.com/oauth2/token
    # -- FitBit client id
    clientId:
    # -- FitBit client secret
    clientSecret:
    # -- List of scopes of the data that should be collected from Fitbit. For details, please refer to https://dev.fitbit.com/build/reference/web-api/developer-guide/application-design/#Scopes
    scope: activity heartrate sleep profile

  garmin:
    # -- set to true, if Garmin client should be used
    enable: false
    # -- Type of the data sources
    sourceType: Garmin
    # -- Pre authorization endpoint to get request token in OAuth 1.0 terminology
    preAuthorizationEndpoint: https://connectapi.garmin.com/oauth-service/oauth/request_token
    # -- Authorization endpoint to get oauth confirmation in OAuth 1.0 terminology
    authorizationEndpoint: https://connect.garmin.com/oauthConfirm
    # -- Endpoint to deregister a user on garmin to disable receiving push requests
    deregistrationEndpoint: https://healthapi.garmin.com/wellness-api/rest/user/registration
     # -- Token endpoint to request access-token from Garmin
    tokenEndpoint: https://connectapi.garmin.com/oauth-service/oauth/access_token
    # -- Garmin client id
    clientId: Garmin-clientid
    # -- Garmin client secret
    clientSecret: Garmin-clientsecret
    # -- List of scopes of the data that should be collected from Garmin.
    scope: activity heartrate sleep profile

  oura:
    # -- set to true, if Oura client should be used
    enable: true
    # -- Type of the data sources
    sourceType: Oura
    # -- Authorization endpoint for Oura authentication and authorization
    authorizationEndpoint: https://cloud.ouraring.com/oauth/authorize
    # -- Token endpoint to request access-token from Oura
    tokenEndpoint: https://api.ouraring.com/oauth/token
    deregistrationEndpoint: https://api.ouraring.com/oauth/revoke
    # -- Oura client id
    clientId: Oura-clientid
    # -- Oura client secret
    clientSecret: Oura-clientsecret
    # -- List of scopes of the data that should be collected from Oura. For details, please refer to https://cloud.ouraring.com/docs/authentication
    scope: daily session heartrate workout tag personal email spo2 ring_configuration
