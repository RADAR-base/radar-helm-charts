apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "common.names.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 4 }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
data:
  sink-s3.properties: |
    name=radar-s3-sink-connector
    connector.class=io.confluent.connect.s3.S3SinkConnector
    tasks.max={{ .Values.maxTasks | int }}
    topics={{ .Values.topics }}
    flush.size={{ .Values.flushSize | int }}
    s3.bucket.name={{ .Values.bucketName }}
    {{- if .Values.s3Region }}
    s3.region={{ .Values.s3Region }}
    {{- end }}
    s3.part.size={{ .Values.s3PartSize | int }}
    s3.object.tagging={{ .Values.s3Tagging }}
    connect.meta.data=false
    {{- if .Values.s3Endpoint }}
    store.url={{ .Values.s3Endpoint }}
    {{- end }}
    storage.class=io.confluent.connect.s3.storage.S3Storage
    format.class=io.confluent.connect.s3.format.avro.AvroFormat
    transforms=combineKeyValue
    transforms.combineKeyValue.type=org.radarbase.kafka.connect.transforms.CombineKeyValue
    rotate.schedule.interval.ms={{ .Values.rotateInterval | int }}
    timezone=UTC
    # -- See https://stackoverflow.com/questions/62525026/kafka-connect-exception-replication-factor-3-larger-than-available-brokers-1
    config.storage.replication.factor={{ .Values.kafka_num_brokers | int }}
    offset.storage.replication.factor={{ .Values.kafka_num_brokers | int }}
    status.storage.replication.factor={{ .Values.kafka_num_brokers | int }}
    topic.creation.default.replication.factor={{ .Values.kafka_num_brokers | int }}
    # --
    avro.codec=deflate
    errors.tolerance=all
    errors.log.enable=true
    errors.deadletterqueue.topic.name=dead_letter_queue_s3
    errors.deadletterqueue.topic.replication.factor={{ .Values.kafka_num_brokers | int }}
    errors.deadletterqueue.context.headers.enable=true
    errors.retry.delay.max.ms=60000
    errors.retry.timeout=300000
  healthcheck.sh: |
    #!/bin/sh
    STATUS=$(curl -sf localhost:8083/connectors/radar-s3-sink-connector/status | grep -o '\"state\":\"[^\"]*\"')
    if echo "$STATUS" | tr '\\n' ',' | grep -q FAILED; then
      exit 1
    elif [ $(echo "$STATUS" | grep RUNNING | wc -l) -le 1 ]; then
      exit 1
    fi
  add-topics-to-config.sh: |
    #!/usr/bin/env sh
    SOURCE=$1
    TARGET=$2
    set -e
    TOPICS="$(curl -sf {{ .Values.catalogServer.url }}/source-types | jq -r '[to_entries | .[] | select(.key | test("^.*-source-types$")) | .value[].data[].topic] | sort | unique | join(",")')"
    if [ "$TOPICS" == "" ]; then
      echo "No topics found!"
      exit 1
    fi
    sed "s/^topics=.\+\$/\\0,$TOPICS/" "$SOURCE" | sed "s/^topics=\$/\\0$TOPICS/" > "$TARGET"
    echo "Configured the following topics"
    grep "topics=" "$TARGET"
