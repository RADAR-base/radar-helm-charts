# Default values for radar-upload-connect-backend.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- Number of radar-upload-connect-backend replicas to deploy
replicaCount: 2

image:
  # -- Image registry
  registry: docker.io
  # -- Image repository
  repository: radarbase/radar-upload-connect-backend
  # -- Image tag (immutable tags are recommended)
  # Overrides the image tag whose default is the chart appVersion.
  tag:
  # -- Image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
  digest: ""
  # -- Image pull policy
  pullPolicy: IfNotPresent
  # -- Optionally specify an array of imagePullSecrets.
  # Secrets must be manually created in the namespace.
  # e.g:
  # pullSecrets:
  #   - myRegistryKeySecretName
  #
  pullSecrets: []

# -- String to partially override radar-upload-connect-backend.fullname template with a string (will prepend the release name)
nameOverride: ""
# -- String to fully override radar-upload-connect-backend.fullname template with a string
fullnameOverride: ""

# -- Configure radar-upload-connect-backend pods' Security Context
podSecurityContext: {}
  # fsGroup: 2000

# -- Configure radar-upload-connect-backend containers' Security Context
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  # -- Kubernetes Service type
  type: ClusterIP
  # -- radar-upload-connect-backend port
  port: 8085

# -- Reconfigure Ingress to not force TLS
disable_tls: false
# -- The protocol in advertised URIs (https, http)
advertised_protocol: https

ingress:
  # -- Enable ingress controller resource
  enabled: true
  # -- Annotations that define default ingress class, certificate issuer and proxy settings
  # @default -- check values.yaml
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/proxy-body-size: 200m
    nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
  # -- Path within the url structure
  path: "/upload/api/?(.*)"
  # -- Ingress Path type
  pathType: ImplementationSpecific
  # -- IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
  ingressClassName: nginx
  # -- Host to listen to requests to
  hosts:
    - localhost
  tls:
    # -- Name of the secret containing TLS certificates
    secretName: radar-base-tls

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi

  # -- CPU/Memory resource requests
  requests:
    cpu: 100m
    memory: 2Gi

# -- Node labels for pod assignment
nodeSelector: {}

# -- Toleration labels for pod assignment
tolerations: []

# -- Affinity labels for pod assignment
affinity: {}

# -- Extra environment variables
extraEnvVars: []
#  - name: BEARER_AUTH
#    value: true

# -- Custom livenessProbe that overrides the default one
customLivenessProbe: {}

livenessProbe:
  # -- Enable livenessProbe
  enabled: true
  # -- Initial delay seconds for livenessProbe
  initialDelaySeconds: 3
  # -- Period seconds for livenessProbe
  periodSeconds: 300
  # -- Timeout seconds for livenessProbe
  timeoutSeconds: 10
  # -- Success threshold for livenessProbe
  successThreshold: 1
  # -- Failure threshold for livenessProbe
  failureThreshold: 3

# -- Custom readinessProbe that overrides the default one
customReadinessProbe: {}

readinessProbe:
  # -- Enable readinessProbe
  enabled: true
  # -- Initial delay seconds for readinessProbe
  initialDelaySeconds: 5
  # -- Period seconds for readinessProbe
  periodSeconds: 10
  # -- Timeout seconds for readinessProbe
  timeoutSeconds: 10
  # -- Success threshold for readinessProbe
  successThreshold: 1
  # -- Failure threshold for readinessProbe
  failureThreshold: 3

# -- Network policy defines who can access this application and who this applications has access to
# @default -- check `values.yaml`
networkpolicy:
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: '{{ .Release.Namespace }}'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: ingress-nginx
  egress:
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
        except:
        - 10.0.0.0/8
        - 192.168.0.0/16
        - 172.16.0.0/12
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: '{{ .Release.Namespace }}'
      podSelector:
        matchLabels:
          app.kubernetes.io/instance: '{{ .Values.postgres.host | default "radar-cloudnative-postgresql-cluster" | trunc 63 | trimSuffix "-" }}'
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: '{{ .Release.Namespace }}'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: 'management-portal'
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: kube-system
      podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
      - port: 53
        protocol: UDP
      - port: 53
        protocol: TCP

# -- OAuth2 client id of the upload connect backend application
client_id: radar_upload_backend
# -- OAuth2 client secret of the upload connect backend
client_secret: secret
postgres:
  # -- Host name of the database to store uploaded data and metadata
  host:
  # -- Database name
  database:
  # - Database port
  port:
  # -- Kubernetes secret containing the database JDBC Connection url
  # (disables use of 'host', 'port' and 'database' values).
  urlSecret:
    name: radar-cloudnative-postgresql-uploadconnector
    key: jdbc-uri
  # -- Database username
  user:
  # -- Kubernetes secret containing the database username
  # (disables use of 'user' value).
  userSecret:
    name: radar-cloudnative-postgresql-uploadconnector
    key: username
  # -- Database password
  password:
  # -- Kubernetes secret containing the database password
  # (disables use of 'password' value).
  passwordSecret:
    name: radar-cloudnative-postgresql-uploadconnector
    key: password

  # -- Additional JDBC connection parameters e.g. sslmode=verify-full
  #  Ignored when using 'urlSecret'.
  parameters:

# -- URL of the Management Portal
managementportal_url: http://management-portal:8080/managementportal
# -- Server name or domain name
serverName: localhost
